
byggern2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800200  00000e34  00000ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800238  00800238  00000f00  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001842  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010f4  00000000  00000000  000028f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b9  00000000  00000000  000039ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  000043a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076b  00000000  00000000  00004644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000061f  00000000  00000000  00004daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000053ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	1f c2       	rjmp	.+1086   	; 0x444 <__vector_1>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e3       	ldi	r30, 0x34	; 52
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 33       	cpi	r26, 0x38	; 56
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a8 e3       	ldi	r26, 0x38	; 56
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 34       	cpi	r26, 0x44	; 68
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	2b d1       	rcall	.+598    	; 0x376 <main>
 120:	87 c6       	rjmp	.+3342   	; 0xe30 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <can_Init>:

#include "can.h"
#include "MCP2515.h"

void can_Init(){
	mcp2515_BitModify(MCP_RXB0CTRL, MCP_FILTER_MASK, 0xFF);		//Filter Off
 124:	4f ef       	ldi	r20, 0xFF	; 255
 126:	60 e6       	ldi	r22, 0x60	; 96
 128:	80 e6       	ldi	r24, 0x60	; 96
 12a:	c0 c1       	rjmp	.+896    	; 0x4ac <mcp2515_BitModify>
 12c:	08 95       	ret

0000012e <can_sendMessage>:
}

void can_sendMessage(can_message_t message){
 12e:	cf 92       	push	r12
 130:	df 92       	push	r13
 132:	ef 92       	push	r14
 134:	ff 92       	push	r15
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	2b 97       	sbiw	r28, 0x0b	; 11
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
 14e:	e9 82       	std	Y+1, r14	; 0x01
 150:	fa 82       	std	Y+2, r15	; 0x02
 152:	0b 83       	std	Y+3, r16	; 0x03
 154:	1c 83       	std	Y+4, r17	; 0x04
 156:	2d 83       	std	Y+5, r18	; 0x05
 158:	3e 83       	std	Y+6, r19	; 0x06
 15a:	4f 83       	std	Y+7, r20	; 0x07
 15c:	58 87       	std	Y+8, r21	; 0x08
 15e:	69 87       	std	Y+9, r22	; 0x09
 160:	7a 87       	std	Y+10, r23	; 0x0a
 162:	8b 87       	std	Y+11, r24	; 0x0b
 164:	e9 80       	ldd	r14, Y+1	; 0x01
 166:	fa 80       	ldd	r15, Y+2	; 0x02

	while(mcp2515_Read(MCP_TXB0CTRL) & (1 << MCP_TXREQ));
 168:	80 e3       	ldi	r24, 0x30	; 48
 16a:	80 d1       	rcall	.+768    	; 0x46c <mcp2515_Read>
 16c:	83 fd       	sbrc	r24, 3
 16e:	fc cf       	rjmp	.-8      	; 0x168 <can_sendMessage+0x3a>
	mcp2515_Write(MCP_TXB0SIDH, (message.id >> 3));				//Legger identiteten i høy og lav registeret til ID. (til sammen 11bit)
 170:	b7 01       	movw	r22, r14
 172:	76 95       	lsr	r23
 174:	67 95       	ror	r22
 176:	76 95       	lsr	r23
 178:	67 95       	ror	r22
 17a:	76 95       	lsr	r23
 17c:	67 95       	ror	r22
 17e:	81 e3       	ldi	r24, 0x31	; 49
 180:	81 d1       	rcall	.+770    	; 0x484 <mcp2515_Write>
	mcp2515_Write(MCP_TXB0SIDL, (uint8_t)(message.id << 5));
 182:	6e 2d       	mov	r22, r14
 184:	62 95       	swap	r22
 186:	66 0f       	add	r22, r22
 188:	60 7e       	andi	r22, 0xE0	; 224
 18a:	82 e3       	ldi	r24, 0x32	; 50
 18c:	7b d1       	rcall	.+758    	; 0x484 <mcp2515_Write>
	mcp2515_Write(MCP_TXB0DLC, message.length);					//Setter datalengden i DLC registeret. (4 bit)
 18e:	60 2f       	mov	r22, r16
 190:	85 e3       	ldi	r24, 0x35	; 53
 192:	78 d1       	rcall	.+752    	; 0x484 <mcp2515_Write>
 194:	00 23       	and	r16, r16
	for (int i=0;i<message.length;i++){
 196:	a1 f0       	breq	.+40     	; 0x1c0 <can_sendMessage+0x92>
 198:	7e 01       	movw	r14, r28
 19a:	24 e0       	ldi	r18, 0x04	; 4
 19c:	e2 0e       	add	r14, r18
 19e:	f1 1c       	adc	r15, r1
 1a0:	ce 01       	movw	r24, r28
 1a2:	80 0f       	add	r24, r16
 1a4:	91 1d       	adc	r25, r1
 1a6:	fc 01       	movw	r30, r24
 1a8:	34 96       	adiw	r30, 0x04	; 4
 1aa:	6f 01       	movw	r12, r30
 1ac:	16 e3       	ldi	r17, 0x36	; 54
 1ae:	f7 01       	movw	r30, r14
		mcp2515_Write(MCP_TXB0D0 + i, message.data[i]);
 1b0:	61 91       	ld	r22, Z+
 1b2:	7f 01       	movw	r14, r30
 1b4:	81 2f       	mov	r24, r17
 1b6:	66 d1       	rcall	.+716    	; 0x484 <mcp2515_Write>
 1b8:	1f 5f       	subi	r17, 0xFF	; 255

	while(mcp2515_Read(MCP_TXB0CTRL) & (1 << MCP_TXREQ));
	mcp2515_Write(MCP_TXB0SIDH, (message.id >> 3));				//Legger identiteten i høy og lav registeret til ID. (til sammen 11bit)
	mcp2515_Write(MCP_TXB0SIDL, (uint8_t)(message.id << 5));
	mcp2515_Write(MCP_TXB0DLC, message.length);					//Setter datalengden i DLC registeret. (4 bit)
	for (int i=0;i<message.length;i++){
 1ba:	ec 14       	cp	r14, r12
 1bc:	fd 04       	cpc	r15, r13
 1be:	b9 f7       	brne	.-18     	; 0x1ae <can_sendMessage+0x80>
		mcp2515_Write(MCP_TXB0D0 + i, message.data[i]);
	}	
	mcp2515_RTS();
 1c0:	70 d1       	rcall	.+736    	; 0x4a2 <mcp2515_RTS>
 1c2:	2b 96       	adiw	r28, 0x0b	; 11
}
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	f8 94       	cli
 1c8:	de bf       	out	0x3e, r29	; 62
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	cd bf       	out	0x3d, r28	; 61
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	df 90       	pop	r13
 1dc:	cf 90       	pop	r12
 1de:	08 95       	ret

000001e0 <can_read>:
 1e0:	8f 92       	push	r8

can_message_t can_read(){
 1e2:	9f 92       	push	r9
 1e4:	af 92       	push	r10
 1e6:	bf 92       	push	r11
 1e8:	cf 92       	push	r12
 1ea:	df 92       	push	r13
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	2b 97       	sbiw	r28, 0x0b	; 11
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
 208:	4c 01       	movw	r8, r24
	can_message_t message;
	message.id = ((mcp2515_Read(MCP_RXB0SIDH) << 3) | (mcp2515_Read(MCP_RXB0SIDL) >> 5));
 20a:	81 e6       	ldi	r24, 0x61	; 97
 20c:	2f d1       	rcall	.+606    	; 0x46c <mcp2515_Read>
 20e:	a8 2e       	mov	r10, r24
 210:	82 e6       	ldi	r24, 0x62	; 98
 212:	2c d1       	rcall	.+600    	; 0x46c <mcp2515_Read>
 214:	b1 2c       	mov	r11, r1
 216:	aa 0c       	add	r10, r10
 218:	bb 1c       	adc	r11, r11
 21a:	aa 0c       	add	r10, r10
 21c:	bb 1c       	adc	r11, r11
 21e:	aa 0c       	add	r10, r10
 220:	bb 1c       	adc	r11, r11
 222:	82 95       	swap	r24
 224:	86 95       	lsr	r24
 226:	87 70       	andi	r24, 0x07	; 7
 228:	a8 2a       	or	r10, r24
	message.length = mcp2515_Read(MCP_RXB0DLC);
 22a:	85 e6       	ldi	r24, 0x65	; 101
 22c:	1f d1       	rcall	.+574    	; 0x46c <mcp2515_Read>
 22e:	08 2f       	mov	r16, r24
 230:	88 23       	and	r24, r24
	
	for (int i = 0; i < message.length; i++){
 232:	a1 f0       	breq	.+40     	; 0x25c <can_read+0x7c>
 234:	7e 01       	movw	r14, r28
 236:	24 e0       	ldi	r18, 0x04	; 4
 238:	e2 0e       	add	r14, r18
 23a:	f1 1c       	adc	r15, r1
 23c:	ce 01       	movw	r24, r28
 23e:	80 0f       	add	r24, r16
 240:	91 1d       	adc	r25, r1
 242:	fc 01       	movw	r30, r24
 244:	34 96       	adiw	r30, 0x04	; 4
 246:	6f 01       	movw	r12, r30
 248:	16 e6       	ldi	r17, 0x66	; 102
		message.data[i] = mcp2515_Read(MCP_RXB0D0 + i);
 24a:	81 2f       	mov	r24, r17
 24c:	0f d1       	rcall	.+542    	; 0x46c <mcp2515_Read>
 24e:	f7 01       	movw	r30, r14
 250:	81 93       	st	Z+, r24
 252:	7f 01       	movw	r14, r30
 254:	1f 5f       	subi	r17, 0xFF	; 255
 256:	ec 15       	cp	r30, r12
can_message_t can_read(){
	can_message_t message;
	message.id = ((mcp2515_Read(MCP_RXB0SIDH) << 3) | (mcp2515_Read(MCP_RXB0SIDL) >> 5));
	message.length = mcp2515_Read(MCP_RXB0DLC);
	
	for (int i = 0; i < message.length; i++){
 258:	fd 05       	cpc	r31, r13
 25a:	b9 f7       	brne	.-18     	; 0x24a <can_read+0x6a>
		message.data[i] = mcp2515_Read(MCP_RXB0D0 + i);
	}
	mcp2515_BitModify(MCP_CANINTF, MCP_RX0IF, 0x00);
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	8c e2       	ldi	r24, 0x2C	; 44
 262:	24 d1       	rcall	.+584    	; 0x4ac <mcp2515_BitModify>
 264:	ba 82       	std	Y+2, r11	; 0x02
	
	return message;
 266:	a9 82       	std	Y+1, r10	; 0x01
 268:	0b 83       	std	Y+3, r16	; 0x03
 26a:	8b e0       	ldi	r24, 0x0B	; 11
 26c:	fe 01       	movw	r30, r28
 26e:	31 96       	adiw	r30, 0x01	; 1
 270:	d4 01       	movw	r26, r8
 272:	01 90       	ld	r0, Z+
 274:	0d 92       	st	X+, r0
 276:	8a 95       	dec	r24
 278:	e1 f7       	brne	.-8      	; 0x272 <can_read+0x92>
 27a:	c4 01       	movw	r24, r8
}
 27c:	2b 96       	adiw	r28, 0x0b	; 11
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	de bf       	out	0x3e, r29	; 62
 284:	0f be       	out	0x3f, r0	; 63
 286:	cd bf       	out	0x3d, r28	; 61
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	df 90       	pop	r13
 296:	cf 90       	pop	r12
 298:	bf 90       	pop	r11
 29a:	af 90       	pop	r10
 29c:	9f 90       	pop	r9
 29e:	8f 90       	pop	r8
 2a0:	08 95       	ret

000002a2 <can_print>:
 2a2:	cf 92       	push	r12

void can_print(can_message_t message){
 2a4:	df 92       	push	r13
 2a6:	ef 92       	push	r14
 2a8:	ff 92       	push	r15
 2aa:	0f 93       	push	r16
 2ac:	1f 93       	push	r17
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
 2b6:	2b 97       	sbiw	r28, 0x0b	; 11
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61
 2c2:	e9 82       	std	Y+1, r14	; 0x01
 2c4:	fa 82       	std	Y+2, r15	; 0x02
 2c6:	0b 83       	std	Y+3, r16	; 0x03
 2c8:	1c 83       	std	Y+4, r17	; 0x04
 2ca:	2d 83       	std	Y+5, r18	; 0x05
 2cc:	3e 83       	std	Y+6, r19	; 0x06
 2ce:	4f 83       	std	Y+7, r20	; 0x07
 2d0:	58 87       	std	Y+8, r21	; 0x08
 2d2:	69 87       	std	Y+9, r22	; 0x09
 2d4:	7a 87       	std	Y+10, r23	; 0x0a
 2d6:	8b 87       	std	Y+11, r24	; 0x0b
	printf("CAN-bus message: (id:%02X, len:%d, data:{", message.id, message.length);
 2d8:	1f 92       	push	r1
 2da:	0f 93       	push	r16
 2dc:	8a 81       	ldd	r24, Y+2	; 0x02
 2de:	8f 93       	push	r24
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	8f 93       	push	r24
 2e4:	86 e0       	ldi	r24, 0x06	; 6
 2e6:	92 e0       	ldi	r25, 0x02	; 2
 2e8:	9f 93       	push	r25
 2ea:	8f 93       	push	r24
 2ec:	6f d1       	rcall	.+734    	; 0x5cc <printf>
		if(message.length){
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	00 23       	and	r16, r16
 2fc:	51 f1       	breq	.+84     	; 0x352 <can_print+0xb0>
			printf("%d", message.data[0]);
 2fe:	8c 81       	ldd	r24, Y+4	; 0x04
 300:	1f 92       	push	r1
 302:	8f 93       	push	r24
 304:	82 e3       	ldi	r24, 0x32	; 50
 306:	92 e0       	ldi	r25, 0x02	; 2
 308:	9f 93       	push	r25
 30a:	8f 93       	push	r24
 30c:	5f d1       	rcall	.+702    	; 0x5cc <printf>
		}
		for(uint8_t i = 1; i < message.length; i++){
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	02 30       	cpi	r16, 0x02	; 2
 318:	e0 f0       	brcs	.+56     	; 0x352 <can_print+0xb0>
 31a:	7e 01       	movw	r14, r28
 31c:	25 e0       	ldi	r18, 0x05	; 5
 31e:	e2 0e       	add	r14, r18
 320:	f1 1c       	adc	r15, r1
 322:	02 50       	subi	r16, 0x02	; 2
 324:	ce 01       	movw	r24, r28
 326:	80 0f       	add	r24, r16
 328:	91 1d       	adc	r25, r1
 32a:	fc 01       	movw	r30, r24
 32c:	36 96       	adiw	r30, 0x06	; 6
 32e:	6f 01       	movw	r12, r30
			printf(", %d", message.data[i]);
 330:	00 e3       	ldi	r16, 0x30	; 48
 332:	12 e0       	ldi	r17, 0x02	; 2
 334:	f7 01       	movw	r30, r14
 336:	81 91       	ld	r24, Z+
 338:	7f 01       	movw	r14, r30
 33a:	1f 92       	push	r1
 33c:	8f 93       	push	r24
 33e:	1f 93       	push	r17
 340:	0f 93       	push	r16
 342:	44 d1       	rcall	.+648    	; 0x5cc <printf>
void can_print(can_message_t message){
	printf("CAN-bus message: (id:%02X, len:%d, data:{", message.id, message.length);
		if(message.length){
			printf("%d", message.data[0]);
		}
		for(uint8_t i = 1; i < message.length; i++){
 344:	0f 90       	pop	r0
 346:	0f 90       	pop	r0
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	ec 14       	cp	r14, r12
 34e:	fd 04       	cpc	r15, r13
			printf(", %d", message.data[i]);
		}
	printf("})\n");
 350:	89 f7       	brne	.-30     	; 0x334 <can_print+0x92>
 352:	85 e3       	ldi	r24, 0x35	; 53
 354:	92 e0       	ldi	r25, 0x02	; 2
 356:	4d d1       	rcall	.+666    	; 0x5f2 <puts>
 358:	2b 96       	adiw	r28, 0x0b	; 11
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	1f 91       	pop	r17
 36a:	0f 91       	pop	r16
 36c:	ff 90       	pop	r15
 36e:	ef 90       	pop	r14
 370:	df 90       	pop	r13
 372:	cf 90       	pop	r12
 374:	08 95       	ret

00000376 <main>:
#include "spi.h"
#include "MCP2515.h"
#include "can.h"
#include "pwm.h"

int main(void){
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	cd b7       	in	r28, 0x3d	; 61
 37c:	de b7       	in	r29, 0x3e	; 62
 37e:	2b 97       	sbiw	r28, 0x0b	; 11
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	f8 94       	cli
 384:	de bf       	out	0x3e, r29	; 62
 386:	0f be       	out	0x3f, r0	; 63
 388:	cd bf       	out	0x3d, r28	; 61

	uart_init(MYUBRR);
 38a:	87 e6       	ldi	r24, 0x67	; 103
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	b7 d0       	rcall	.+366    	; 0x4fe <uart_init>
	fdevopen(&uart_transmit, &uart_receive);
 390:	64 e9       	ldi	r22, 0x94	; 148
 392:	72 e0       	ldi	r23, 0x02	; 2
 394:	8c e8       	ldi	r24, 0x8C	; 140
 396:	92 e0       	ldi	r25, 0x02	; 2
	SPI_MasterInit();
 398:	cf d0       	rcall	.+414    	; 0x538 <fdevopen>
	mcp2515_Init();
 39a:	a3 d0       	rcall	.+326    	; 0x4e2 <SPI_MasterInit>
 39c:	a0 d0       	rcall	.+320    	; 0x4de <mcp2515_Init>
	//pwmDriver();
	can_Init();		//CanInit funker pr 01.11.2017 ikke på Atmega2560'n
 39e:	c2 de       	rcall	.-636    	; 0x124 <can_Init>
 3a0:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a2:	81 ee       	ldi	r24, 0xE1	; 225
 3a4:	94 e0       	ldi	r25, 0x04	; 4
 3a6:	21 50       	subi	r18, 0x01	; 1
 3a8:	80 40       	sbci	r24, 0x00	; 0
 3aa:	90 40       	sbci	r25, 0x00	; 0
 3ac:	e1 f7       	brne	.-8      	; 0x3a6 <main+0x30>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <main+0x3a>
 3b0:	00 00       	nop
	_delay_ms(100);
	//mcp2515_BitModify(MCP_CANCTRL, MODE_MASK, MODE_CONFIG);		//Set mcp in config mode
	mcp2515_BitModify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);		//Set mcp in normal mode
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	60 ee       	ldi	r22, 0xE0	; 224
 3b6:	8f e0       	ldi	r24, 0x0F	; 15
 3b8:	79 d0       	rcall	.+242    	; 0x4ac <mcp2515_BitModify>
 3ba:	2f ef       	ldi	r18, 0xFF	; 255
 3bc:	81 ee       	ldi	r24, 0xE1	; 225
 3be:	94 e0       	ldi	r25, 0x04	; 4
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	80 40       	sbci	r24, 0x00	; 0
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <main+0x4a>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <main+0x54>
 3ca:	00 00       	nop
 3cc:	0f 2e       	mov	r0, r31
	*/
	
	
	while(1){
		can_message_t* msg;
		msg->data[0] = 0xFA;	// 0b 1110 1101				= DECIMAL 237
 3ce:	fa ef       	ldi	r31, 0xFA	; 250
 3d0:	af 2e       	mov	r10, r31
 3d2:	f0 2d       	mov	r31, r0
 3d4:	0f 2e       	mov	r0, r31
		msg->data[1] = 0xA9;	// 0b 1010 0001				= DECIMAL 161
 3d6:	f9 ea       	ldi	r31, 0xA9	; 169
 3d8:	bf 2e       	mov	r11, r31
 3da:	f0 2d       	mov	r31, r0
 3dc:	0f 2e       	mov	r0, r31
		msg->id = 0x0052;		// 0b 0001 0010 0011 0100	= DECIMAL 4660
 3de:	f2 e5       	ldi	r31, 0x52	; 82
 3e0:	cf 2e       	mov	r12, r31
 3e2:	f0 2d       	mov	r31, r0
 3e4:	91 2c       	mov	r9, r1
 3e6:	68 94       	set
		msg->length = 0x2;		// 0b 0010					= DECIMAL 2
 3e8:	dd 24       	eor	r13, r13
 3ea:	d1 f8       	bld	r13, 1
 3ec:	e0 e0       	ldi	r30, 0x00	; 0
	*/
	
	
	while(1){
		can_message_t* msg;
		msg->data[0] = 0xFA;	// 0b 1110 1101				= DECIMAL 237
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	a3 82       	std	Z+3, r10	; 0x03
 3f2:	b4 82       	std	Z+4, r11	; 0x04
		msg->data[1] = 0xA9;	// 0b 1010 0001				= DECIMAL 161
 3f4:	ec 2c       	mov	r14, r12
		msg->id = 0x0052;		// 0b 0001 0010 0011 0100	= DECIMAL 4660
 3f6:	c0 82       	st	Z, r12
 3f8:	91 82       	std	Z+1, r9	; 0x01
 3fa:	d2 82       	std	Z+2, r13	; 0x02
		msg->length = 0x2;		// 0b 0010					= DECIMAL 2
 3fc:	f9 2c       	mov	r15, r9
		can_sendMessage(*msg);
 3fe:	0d 2d       	mov	r16, r13
 400:	1a 2d       	mov	r17, r10
 402:	2b 2d       	mov	r18, r11
 404:	35 81       	ldd	r19, Z+5	; 0x05
 406:	46 81       	ldd	r20, Z+6	; 0x06
 408:	57 81       	ldd	r21, Z+7	; 0x07
 40a:	60 85       	ldd	r22, Z+8	; 0x08
 40c:	71 85       	ldd	r23, Z+9	; 0x09
 40e:	82 85       	ldd	r24, Z+10	; 0x0a
 410:	8e de       	rcall	.-740    	; 0x12e <can_sendMessage>
		can_print(can_read());
 412:	ce 01       	movw	r24, r28
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	e4 de       	rcall	.-568    	; 0x1e0 <can_read>
 418:	e9 80       	ldd	r14, Y+1	; 0x01
 41a:	fa 80       	ldd	r15, Y+2	; 0x02
 41c:	0b 81       	ldd	r16, Y+3	; 0x03
 41e:	1c 81       	ldd	r17, Y+4	; 0x04
 420:	2d 81       	ldd	r18, Y+5	; 0x05
 422:	3e 81       	ldd	r19, Y+6	; 0x06
 424:	4f 81       	ldd	r20, Y+7	; 0x07
 426:	58 85       	ldd	r21, Y+8	; 0x08
 428:	69 85       	ldd	r22, Y+9	; 0x09
 42a:	7a 85       	ldd	r23, Y+10	; 0x0a
 42c:	8b 85       	ldd	r24, Y+11	; 0x0b
 42e:	39 df       	rcall	.-398    	; 0x2a2 <can_print>
 430:	2f ef       	ldi	r18, 0xFF	; 255
 432:	81 ee       	ldi	r24, 0xE1	; 225
 434:	94 e0       	ldi	r25, 0x04	; 4
 436:	21 50       	subi	r18, 0x01	; 1
 438:	80 40       	sbci	r24, 0x00	; 0
 43a:	90 40       	sbci	r25, 0x00	; 0
 43c:	e1 f7       	brne	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 440:	00 00       	nop
 442:	d4 cf       	rjmp	.-88     	; 0x3ec <main+0x76>

00000444 <__vector_1>:
 444:	1f 92       	push	r1
	PORTB &= ~(1 << PB7);	//Lower the CS pin of the can controller
	SPI_MasterTransmit(MCP_READ_STATUS);
	status = SPI_MasterTransmit(0x00);	//0x00 = send some don't care data, to receive data from the can-controlleren.
	PORTB |= (1 << PB7);	//Put the CS pin high
	return status;
}
 446:	0f 92       	push	r0
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	0f 92       	push	r0
 44c:	11 24       	eor	r1, r1
 44e:	8f 93       	push	r24
 450:	9f 93       	push	r25
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <__data_end+0x1>
 45a:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <__data_end>
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	0f 90       	pop	r0
 464:	0f be       	out	0x3f, r0	; 63
 466:	0f 90       	pop	r0
 468:	1f 90       	pop	r1
 46a:	18 95       	reti

0000046c <mcp2515_Read>:
 46c:	cf 93       	push	r28
 46e:	c8 2f       	mov	r28, r24
 470:	2f 98       	cbi	0x05, 7	; 5
 472:	83 e0       	ldi	r24, 0x03	; 3
 474:	3e d0       	rcall	.+124    	; 0x4f2 <SPI_MasterTransmit>
 476:	8c 2f       	mov	r24, r28
 478:	3c d0       	rcall	.+120    	; 0x4f2 <SPI_MasterTransmit>
 47a:	8c 2f       	mov	r24, r28
 47c:	3a d0       	rcall	.+116    	; 0x4f2 <SPI_MasterTransmit>
 47e:	2f 9a       	sbi	0x05, 7	; 5
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <mcp2515_Write>:
 484:	cf 93       	push	r28
 486:	df 93       	push	r29
 488:	d8 2f       	mov	r29, r24
 48a:	c6 2f       	mov	r28, r22
 48c:	2f 98       	cbi	0x05, 7	; 5
 48e:	82 e0       	ldi	r24, 0x02	; 2
 490:	30 d0       	rcall	.+96     	; 0x4f2 <SPI_MasterTransmit>
 492:	8d 2f       	mov	r24, r29
 494:	2e d0       	rcall	.+92     	; 0x4f2 <SPI_MasterTransmit>
 496:	8c 2f       	mov	r24, r28
 498:	2c d0       	rcall	.+88     	; 0x4f2 <SPI_MasterTransmit>
 49a:	2f 9a       	sbi	0x05, 7	; 5
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <mcp2515_RTS>:
 4a2:	2f 98       	cbi	0x05, 7	; 5
 4a4:	81 e8       	ldi	r24, 0x81	; 129
 4a6:	25 d0       	rcall	.+74     	; 0x4f2 <SPI_MasterTransmit>
 4a8:	2f 9a       	sbi	0x05, 7	; 5
 4aa:	08 95       	ret

000004ac <mcp2515_BitModify>:

void mcp2515_BitModify(uint8_t address, uint8_t maskbyte, uint8_t databyte){
 4ac:	1f 93       	push	r17
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	18 2f       	mov	r17, r24
 4b4:	d6 2f       	mov	r29, r22
 4b6:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB7);	//Lower the CS pin of the can controller
 4b8:	2f 98       	cbi	0x05, 7	; 5
	SPI_MasterTransmit(MCP_BITMOD);	//Bit Modify
 4ba:	85 e0       	ldi	r24, 0x05	; 5
 4bc:	1a d0       	rcall	.+52     	; 0x4f2 <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
 4be:	81 2f       	mov	r24, r17
 4c0:	18 d0       	rcall	.+48     	; 0x4f2 <SPI_MasterTransmit>
	SPI_MasterTransmit(maskbyte);	//A '1' in the mask register will allow a bit in the register to change, while a '0' will not.
 4c2:	8d 2f       	mov	r24, r29
 4c4:	16 d0       	rcall	.+44     	; 0x4f2 <SPI_MasterTransmit>
	SPI_MasterTransmit(databyte);	//A 1 in the data byte will set the bit and a 0 will clear the bit
 4c6:	8c 2f       	mov	r24, r28
 4c8:	14 d0       	rcall	.+40     	; 0x4f2 <SPI_MasterTransmit>
 4ca:	2f 9a       	sbi	0x05, 7	; 5
	PORTB |= (1 << PB7);	//Put the CS pin high
 4cc:	df 91       	pop	r29
}
 4ce:	cf 91       	pop	r28
 4d0:	1f 91       	pop	r17
 4d2:	08 95       	ret

000004d4 <mcp2515_Reset>:
 4d4:	2f 98       	cbi	0x05, 7	; 5

void mcp2515_Reset(){
	PORTB &= ~(1 << PB7);	//Lower the CS pin of the can controller
	SPI_MasterTransmit(MCP_RESET);
 4d6:	80 ec       	ldi	r24, 0xC0	; 192
 4d8:	0c d0       	rcall	.+24     	; 0x4f2 <SPI_MasterTransmit>
	PORTB |= (1 << PB7);	//Put the CS pin high
 4da:	2f 9a       	sbi	0x05, 7	; 5
 4dc:	08 95       	ret

000004de <mcp2515_Init>:
	mcp_interrupt_triggered = 1;
}

void mcp2515_Init(void){
	//DDRB |= (1 << PB7);		// Setter ChipSelect for Can Controlleren som output
	mcp2515_Reset();
 4de:	fa cf       	rjmp	.-12     	; 0x4d4 <mcp2515_Reset>
 4e0:	08 95       	ret

000004e2 <SPI_MasterInit>:

#include "spi.h"
#include <avr/io.h>

void SPI_MasterInit(void){
	DDRB |= (1 << PB2) | (1 << PB1) | (1 << PB7) | (1 << PB0);	//Set MOSI and SCK as outputs, set also PB0 as output because 2560-MCU is master
 4e2:	84 b1       	in	r24, 0x04	; 4
 4e4:	87 68       	ori	r24, 0x87	; 135
 4e6:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << PB3);							// MISO Input
 4e8:	23 98       	cbi	0x04, 3	; 4
	SPCR |= (1 << SPE) | (1 << MSTR);				//Set MOSI and SCK output, all others input, SPIE-SPI interrupt enable, SPE-SPI Enable, MSTR-Master/Slave Select
 4ea:	8c b5       	in	r24, 0x2c	; 44
 4ec:	80 65       	ori	r24, 0x50	; 80
 4ee:	8c bd       	out	0x2c, r24	; 44
 4f0:	08 95       	ret

000004f2 <SPI_MasterTransmit>:
}

uint8_t SPI_MasterTransmit(char data){
	SPDR = data;							//Start transmission
 4f2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF))){};			//Waits for a transfer to complete, SPIF is set when a serial transfer is complete. 
 4f4:	0d b4       	in	r0, 0x2d	; 45
 4f6:	07 fe       	sbrs	r0, 7
 4f8:	fd cf       	rjmp	.-6      	; 0x4f4 <SPI_MasterTransmit+0x2>
	return SPDR;
 4fa:	8e b5       	in	r24, 0x2e	; 46
 4fc:	08 95       	ret

000004fe <uart_init>:
#include <avr/io.h>


void uart_init(unsigned int ubrr){
	
	UBRR0H = (unsigned char)(ubrr >> 8);
 4fe:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UBRR0L = (unsigned char) ubrr;
 502:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	
	//Enable receiver and transmitter:
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 506:	88 e1       	ldi	r24, 0x18	; 24
 508:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>

	//Set format: 1 stop bit, 8 data bits.
	UCSR0C |= (1 << USBS0) | (1 << UCSZ00) | (1 << UCSZ01);
 50c:	e2 ec       	ldi	r30, 0xC2	; 194
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	8e 60       	ori	r24, 0x0E	; 14
 514:	80 83       	st	Z, r24
 516:	08 95       	ret

00000518 <uart_transmit>:
void uart_transmit(char c) {
	//Sjekk om det er klart for å sende, hvis ikke, vent til det er klart
	//Skriv riktig bokstav til riktig register
	
	//Wait for empty transmit buffer
	while(!(UCSR0A & (1<<UDRE0))){}
 518:	e0 ec       	ldi	r30, 0xC0	; 192
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	90 81       	ld	r25, Z
 51e:	95 ff       	sbrs	r25, 5
 520:	fd cf       	rjmp	.-6      	; 0x51c <uart_transmit+0x4>

	//Put data into buffer;
	UDR0 = c;
 522:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 526:	08 95       	ret

00000528 <uart_receive>:
}

unsigned char uart_receive(){
	while (!(UCSR0A & (1 << RXC0))) {}
 528:	e0 ec       	ldi	r30, 0xC0	; 192
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	88 23       	and	r24, r24
 530:	ec f7       	brge	.-6      	; 0x52c <uart_receive+0x4>
	
	return UDR0;
 532:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
 536:	08 95       	ret

00000538 <fdevopen>:
 538:	0f 93       	push	r16
 53a:	1f 93       	push	r17
 53c:	cf 93       	push	r28
 53e:	df 93       	push	r29
 540:	00 97       	sbiw	r24, 0x00	; 0
 542:	31 f4       	brne	.+12     	; 0x550 <fdevopen+0x18>
 544:	61 15       	cp	r22, r1
 546:	71 05       	cpc	r23, r1
 548:	19 f4       	brne	.+6      	; 0x550 <fdevopen+0x18>
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	39 c0       	rjmp	.+114    	; 0x5c2 <fdevopen+0x8a>
 550:	8b 01       	movw	r16, r22
 552:	ec 01       	movw	r28, r24
 554:	6e e0       	ldi	r22, 0x0E	; 14
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	77 d2       	rcall	.+1262   	; 0xa4c <calloc>
 55e:	fc 01       	movw	r30, r24
 560:	89 2b       	or	r24, r25
 562:	99 f3       	breq	.-26     	; 0x54a <fdevopen+0x12>
 564:	80 e8       	ldi	r24, 0x80	; 128
 566:	83 83       	std	Z+3, r24	; 0x03
 568:	01 15       	cp	r16, r1
 56a:	11 05       	cpc	r17, r1
 56c:	71 f0       	breq	.+28     	; 0x58a <fdevopen+0x52>
 56e:	13 87       	std	Z+11, r17	; 0x0b
 570:	02 87       	std	Z+10, r16	; 0x0a
 572:	81 e8       	ldi	r24, 0x81	; 129
 574:	83 83       	std	Z+3, r24	; 0x03
 576:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <__iob>
 57a:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <__iob+0x1>
 57e:	89 2b       	or	r24, r25
 580:	21 f4       	brne	.+8      	; 0x58a <fdevopen+0x52>
 582:	f0 93 3b 02 	sts	0x023B, r31	; 0x80023b <__iob+0x1>
 586:	e0 93 3a 02 	sts	0x023A, r30	; 0x80023a <__iob>
 58a:	20 97       	sbiw	r28, 0x00	; 0
 58c:	c9 f0       	breq	.+50     	; 0x5c0 <fdevopen+0x88>
 58e:	d1 87       	std	Z+9, r29	; 0x09
 590:	c0 87       	std	Z+8, r28	; 0x08
 592:	83 81       	ldd	r24, Z+3	; 0x03
 594:	82 60       	ori	r24, 0x02	; 2
 596:	83 83       	std	Z+3, r24	; 0x03
 598:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__iob+0x2>
 59c:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <__iob+0x3>
 5a0:	89 2b       	or	r24, r25
 5a2:	71 f4       	brne	.+28     	; 0x5c0 <fdevopen+0x88>
 5a4:	f0 93 3d 02 	sts	0x023D, r31	; 0x80023d <__iob+0x3>
 5a8:	e0 93 3c 02 	sts	0x023C, r30	; 0x80023c <__iob+0x2>
 5ac:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <__iob+0x4>
 5b0:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <__iob+0x5>
 5b4:	89 2b       	or	r24, r25
 5b6:	21 f4       	brne	.+8      	; 0x5c0 <fdevopen+0x88>
 5b8:	f0 93 3f 02 	sts	0x023F, r31	; 0x80023f <__iob+0x5>
 5bc:	e0 93 3e 02 	sts	0x023E, r30	; 0x80023e <__iob+0x4>
 5c0:	cf 01       	movw	r24, r30
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	1f 91       	pop	r17
 5c8:	0f 91       	pop	r16
 5ca:	08 95       	ret

000005cc <printf>:
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	cd b7       	in	r28, 0x3d	; 61
 5d2:	de b7       	in	r29, 0x3e	; 62
 5d4:	ae 01       	movw	r20, r28
 5d6:	4a 5f       	subi	r20, 0xFA	; 250
 5d8:	5f 4f       	sbci	r21, 0xFF	; 255
 5da:	fa 01       	movw	r30, r20
 5dc:	61 91       	ld	r22, Z+
 5de:	71 91       	ld	r23, Z+
 5e0:	af 01       	movw	r20, r30
 5e2:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <__iob+0x2>
 5e6:	90 91 3d 02 	lds	r25, 0x023D	; 0x80023d <__iob+0x3>
 5ea:	33 d0       	rcall	.+102    	; 0x652 <vfprintf>
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	08 95       	ret

000005f2 <puts>:
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	e0 91 3c 02 	lds	r30, 0x023C	; 0x80023c <__iob+0x2>
 5fe:	f0 91 3d 02 	lds	r31, 0x023D	; 0x80023d <__iob+0x3>
 602:	23 81       	ldd	r18, Z+3	; 0x03
 604:	21 ff       	sbrs	r18, 1
 606:	1b c0       	rjmp	.+54     	; 0x63e <puts+0x4c>
 608:	8c 01       	movw	r16, r24
 60a:	d0 e0       	ldi	r29, 0x00	; 0
 60c:	c0 e0       	ldi	r28, 0x00	; 0
 60e:	f8 01       	movw	r30, r16
 610:	81 91       	ld	r24, Z+
 612:	8f 01       	movw	r16, r30
 614:	60 91 3c 02 	lds	r22, 0x023C	; 0x80023c <__iob+0x2>
 618:	70 91 3d 02 	lds	r23, 0x023D	; 0x80023d <__iob+0x3>
 61c:	db 01       	movw	r26, r22
 61e:	18 96       	adiw	r26, 0x08	; 8
 620:	ed 91       	ld	r30, X+
 622:	fc 91       	ld	r31, X
 624:	19 97       	sbiw	r26, 0x09	; 9
 626:	88 23       	and	r24, r24
 628:	31 f0       	breq	.+12     	; 0x636 <puts+0x44>
 62a:	19 95       	eicall
 62c:	89 2b       	or	r24, r25
 62e:	79 f3       	breq	.-34     	; 0x60e <puts+0x1c>
 630:	df ef       	ldi	r29, 0xFF	; 255
 632:	cf ef       	ldi	r28, 0xFF	; 255
 634:	ec cf       	rjmp	.-40     	; 0x60e <puts+0x1c>
 636:	8a e0       	ldi	r24, 0x0A	; 10
 638:	19 95       	eicall
 63a:	89 2b       	or	r24, r25
 63c:	19 f0       	breq	.+6      	; 0x644 <puts+0x52>
 63e:	8f ef       	ldi	r24, 0xFF	; 255
 640:	9f ef       	ldi	r25, 0xFF	; 255
 642:	02 c0       	rjmp	.+4      	; 0x648 <puts+0x56>
 644:	8d 2f       	mov	r24, r29
 646:	9c 2f       	mov	r25, r28
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	1f 91       	pop	r17
 64e:	0f 91       	pop	r16
 650:	08 95       	ret

00000652 <vfprintf>:
 652:	2f 92       	push	r2
 654:	3f 92       	push	r3
 656:	4f 92       	push	r4
 658:	5f 92       	push	r5
 65a:	6f 92       	push	r6
 65c:	7f 92       	push	r7
 65e:	8f 92       	push	r8
 660:	9f 92       	push	r9
 662:	af 92       	push	r10
 664:	bf 92       	push	r11
 666:	cf 92       	push	r12
 668:	df 92       	push	r13
 66a:	ef 92       	push	r14
 66c:	ff 92       	push	r15
 66e:	0f 93       	push	r16
 670:	1f 93       	push	r17
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	cd b7       	in	r28, 0x3d	; 61
 678:	de b7       	in	r29, 0x3e	; 62
 67a:	2b 97       	sbiw	r28, 0x0b	; 11
 67c:	0f b6       	in	r0, 0x3f	; 63
 67e:	f8 94       	cli
 680:	de bf       	out	0x3e, r29	; 62
 682:	0f be       	out	0x3f, r0	; 63
 684:	cd bf       	out	0x3d, r28	; 61
 686:	6c 01       	movw	r12, r24
 688:	7b 01       	movw	r14, r22
 68a:	8a 01       	movw	r16, r20
 68c:	fc 01       	movw	r30, r24
 68e:	17 82       	std	Z+7, r1	; 0x07
 690:	16 82       	std	Z+6, r1	; 0x06
 692:	83 81       	ldd	r24, Z+3	; 0x03
 694:	81 ff       	sbrs	r24, 1
 696:	bf c1       	rjmp	.+894    	; 0xa16 <vfprintf+0x3c4>
 698:	ce 01       	movw	r24, r28
 69a:	01 96       	adiw	r24, 0x01	; 1
 69c:	3c 01       	movw	r6, r24
 69e:	f6 01       	movw	r30, r12
 6a0:	93 81       	ldd	r25, Z+3	; 0x03
 6a2:	f7 01       	movw	r30, r14
 6a4:	93 fd       	sbrc	r25, 3
 6a6:	85 91       	lpm	r24, Z+
 6a8:	93 ff       	sbrs	r25, 3
 6aa:	81 91       	ld	r24, Z+
 6ac:	7f 01       	movw	r14, r30
 6ae:	88 23       	and	r24, r24
 6b0:	09 f4       	brne	.+2      	; 0x6b4 <vfprintf+0x62>
 6b2:	ad c1       	rjmp	.+858    	; 0xa0e <vfprintf+0x3bc>
 6b4:	85 32       	cpi	r24, 0x25	; 37
 6b6:	39 f4       	brne	.+14     	; 0x6c6 <vfprintf+0x74>
 6b8:	93 fd       	sbrc	r25, 3
 6ba:	85 91       	lpm	r24, Z+
 6bc:	93 ff       	sbrs	r25, 3
 6be:	81 91       	ld	r24, Z+
 6c0:	7f 01       	movw	r14, r30
 6c2:	85 32       	cpi	r24, 0x25	; 37
 6c4:	21 f4       	brne	.+8      	; 0x6ce <vfprintf+0x7c>
 6c6:	b6 01       	movw	r22, r12
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	18 d3       	rcall	.+1584   	; 0xcfc <fputc>
 6cc:	e8 cf       	rjmp	.-48     	; 0x69e <vfprintf+0x4c>
 6ce:	91 2c       	mov	r9, r1
 6d0:	21 2c       	mov	r2, r1
 6d2:	31 2c       	mov	r3, r1
 6d4:	ff e1       	ldi	r31, 0x1F	; 31
 6d6:	f3 15       	cp	r31, r3
 6d8:	d8 f0       	brcs	.+54     	; 0x710 <vfprintf+0xbe>
 6da:	8b 32       	cpi	r24, 0x2B	; 43
 6dc:	79 f0       	breq	.+30     	; 0x6fc <vfprintf+0xaa>
 6de:	38 f4       	brcc	.+14     	; 0x6ee <vfprintf+0x9c>
 6e0:	80 32       	cpi	r24, 0x20	; 32
 6e2:	79 f0       	breq	.+30     	; 0x702 <vfprintf+0xb0>
 6e4:	83 32       	cpi	r24, 0x23	; 35
 6e6:	a1 f4       	brne	.+40     	; 0x710 <vfprintf+0xbe>
 6e8:	23 2d       	mov	r18, r3
 6ea:	20 61       	ori	r18, 0x10	; 16
 6ec:	1d c0       	rjmp	.+58     	; 0x728 <vfprintf+0xd6>
 6ee:	8d 32       	cpi	r24, 0x2D	; 45
 6f0:	61 f0       	breq	.+24     	; 0x70a <vfprintf+0xb8>
 6f2:	80 33       	cpi	r24, 0x30	; 48
 6f4:	69 f4       	brne	.+26     	; 0x710 <vfprintf+0xbe>
 6f6:	23 2d       	mov	r18, r3
 6f8:	21 60       	ori	r18, 0x01	; 1
 6fa:	16 c0       	rjmp	.+44     	; 0x728 <vfprintf+0xd6>
 6fc:	83 2d       	mov	r24, r3
 6fe:	82 60       	ori	r24, 0x02	; 2
 700:	38 2e       	mov	r3, r24
 702:	e3 2d       	mov	r30, r3
 704:	e4 60       	ori	r30, 0x04	; 4
 706:	3e 2e       	mov	r3, r30
 708:	2a c0       	rjmp	.+84     	; 0x75e <vfprintf+0x10c>
 70a:	f3 2d       	mov	r31, r3
 70c:	f8 60       	ori	r31, 0x08	; 8
 70e:	1d c0       	rjmp	.+58     	; 0x74a <vfprintf+0xf8>
 710:	37 fc       	sbrc	r3, 7
 712:	2d c0       	rjmp	.+90     	; 0x76e <vfprintf+0x11c>
 714:	20 ed       	ldi	r18, 0xD0	; 208
 716:	28 0f       	add	r18, r24
 718:	2a 30       	cpi	r18, 0x0A	; 10
 71a:	40 f0       	brcs	.+16     	; 0x72c <vfprintf+0xda>
 71c:	8e 32       	cpi	r24, 0x2E	; 46
 71e:	b9 f4       	brne	.+46     	; 0x74e <vfprintf+0xfc>
 720:	36 fc       	sbrc	r3, 6
 722:	75 c1       	rjmp	.+746    	; 0xa0e <vfprintf+0x3bc>
 724:	23 2d       	mov	r18, r3
 726:	20 64       	ori	r18, 0x40	; 64
 728:	32 2e       	mov	r3, r18
 72a:	19 c0       	rjmp	.+50     	; 0x75e <vfprintf+0x10c>
 72c:	36 fe       	sbrs	r3, 6
 72e:	06 c0       	rjmp	.+12     	; 0x73c <vfprintf+0xea>
 730:	8a e0       	ldi	r24, 0x0A	; 10
 732:	98 9e       	mul	r9, r24
 734:	20 0d       	add	r18, r0
 736:	11 24       	eor	r1, r1
 738:	92 2e       	mov	r9, r18
 73a:	11 c0       	rjmp	.+34     	; 0x75e <vfprintf+0x10c>
 73c:	ea e0       	ldi	r30, 0x0A	; 10
 73e:	2e 9e       	mul	r2, r30
 740:	20 0d       	add	r18, r0
 742:	11 24       	eor	r1, r1
 744:	22 2e       	mov	r2, r18
 746:	f3 2d       	mov	r31, r3
 748:	f0 62       	ori	r31, 0x20	; 32
 74a:	3f 2e       	mov	r3, r31
 74c:	08 c0       	rjmp	.+16     	; 0x75e <vfprintf+0x10c>
 74e:	8c 36       	cpi	r24, 0x6C	; 108
 750:	21 f4       	brne	.+8      	; 0x75a <vfprintf+0x108>
 752:	83 2d       	mov	r24, r3
 754:	80 68       	ori	r24, 0x80	; 128
 756:	38 2e       	mov	r3, r24
 758:	02 c0       	rjmp	.+4      	; 0x75e <vfprintf+0x10c>
 75a:	88 36       	cpi	r24, 0x68	; 104
 75c:	41 f4       	brne	.+16     	; 0x76e <vfprintf+0x11c>
 75e:	f7 01       	movw	r30, r14
 760:	93 fd       	sbrc	r25, 3
 762:	85 91       	lpm	r24, Z+
 764:	93 ff       	sbrs	r25, 3
 766:	81 91       	ld	r24, Z+
 768:	7f 01       	movw	r14, r30
 76a:	81 11       	cpse	r24, r1
 76c:	b3 cf       	rjmp	.-154    	; 0x6d4 <vfprintf+0x82>
 76e:	98 2f       	mov	r25, r24
 770:	9f 7d       	andi	r25, 0xDF	; 223
 772:	95 54       	subi	r25, 0x45	; 69
 774:	93 30       	cpi	r25, 0x03	; 3
 776:	28 f4       	brcc	.+10     	; 0x782 <vfprintf+0x130>
 778:	0c 5f       	subi	r16, 0xFC	; 252
 77a:	1f 4f       	sbci	r17, 0xFF	; 255
 77c:	9f e3       	ldi	r25, 0x3F	; 63
 77e:	99 83       	std	Y+1, r25	; 0x01
 780:	0d c0       	rjmp	.+26     	; 0x79c <vfprintf+0x14a>
 782:	83 36       	cpi	r24, 0x63	; 99
 784:	31 f0       	breq	.+12     	; 0x792 <vfprintf+0x140>
 786:	83 37       	cpi	r24, 0x73	; 115
 788:	71 f0       	breq	.+28     	; 0x7a6 <vfprintf+0x154>
 78a:	83 35       	cpi	r24, 0x53	; 83
 78c:	09 f0       	breq	.+2      	; 0x790 <vfprintf+0x13e>
 78e:	55 c0       	rjmp	.+170    	; 0x83a <vfprintf+0x1e8>
 790:	20 c0       	rjmp	.+64     	; 0x7d2 <vfprintf+0x180>
 792:	f8 01       	movw	r30, r16
 794:	80 81       	ld	r24, Z
 796:	89 83       	std	Y+1, r24	; 0x01
 798:	0e 5f       	subi	r16, 0xFE	; 254
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
 79c:	88 24       	eor	r8, r8
 79e:	83 94       	inc	r8
 7a0:	91 2c       	mov	r9, r1
 7a2:	53 01       	movw	r10, r6
 7a4:	12 c0       	rjmp	.+36     	; 0x7ca <vfprintf+0x178>
 7a6:	28 01       	movw	r4, r16
 7a8:	f2 e0       	ldi	r31, 0x02	; 2
 7aa:	4f 0e       	add	r4, r31
 7ac:	51 1c       	adc	r5, r1
 7ae:	f8 01       	movw	r30, r16
 7b0:	a0 80       	ld	r10, Z
 7b2:	b1 80       	ldd	r11, Z+1	; 0x01
 7b4:	36 fe       	sbrs	r3, 6
 7b6:	03 c0       	rjmp	.+6      	; 0x7be <vfprintf+0x16c>
 7b8:	69 2d       	mov	r22, r9
 7ba:	70 e0       	ldi	r23, 0x00	; 0
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <vfprintf+0x170>
 7be:	6f ef       	ldi	r22, 0xFF	; 255
 7c0:	7f ef       	ldi	r23, 0xFF	; 255
 7c2:	c5 01       	movw	r24, r10
 7c4:	90 d2       	rcall	.+1312   	; 0xce6 <strnlen>
 7c6:	4c 01       	movw	r8, r24
 7c8:	82 01       	movw	r16, r4
 7ca:	f3 2d       	mov	r31, r3
 7cc:	ff 77       	andi	r31, 0x7F	; 127
 7ce:	3f 2e       	mov	r3, r31
 7d0:	15 c0       	rjmp	.+42     	; 0x7fc <vfprintf+0x1aa>
 7d2:	28 01       	movw	r4, r16
 7d4:	22 e0       	ldi	r18, 0x02	; 2
 7d6:	42 0e       	add	r4, r18
 7d8:	51 1c       	adc	r5, r1
 7da:	f8 01       	movw	r30, r16
 7dc:	a0 80       	ld	r10, Z
 7de:	b1 80       	ldd	r11, Z+1	; 0x01
 7e0:	36 fe       	sbrs	r3, 6
 7e2:	03 c0       	rjmp	.+6      	; 0x7ea <vfprintf+0x198>
 7e4:	69 2d       	mov	r22, r9
 7e6:	70 e0       	ldi	r23, 0x00	; 0
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <vfprintf+0x19c>
 7ea:	6f ef       	ldi	r22, 0xFF	; 255
 7ec:	7f ef       	ldi	r23, 0xFF	; 255
 7ee:	c5 01       	movw	r24, r10
 7f0:	68 d2       	rcall	.+1232   	; 0xcc2 <strnlen_P>
 7f2:	4c 01       	movw	r8, r24
 7f4:	f3 2d       	mov	r31, r3
 7f6:	f0 68       	ori	r31, 0x80	; 128
 7f8:	3f 2e       	mov	r3, r31
 7fa:	82 01       	movw	r16, r4
 7fc:	33 fc       	sbrc	r3, 3
 7fe:	19 c0       	rjmp	.+50     	; 0x832 <vfprintf+0x1e0>
 800:	82 2d       	mov	r24, r2
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	88 16       	cp	r8, r24
 806:	99 06       	cpc	r9, r25
 808:	a0 f4       	brcc	.+40     	; 0x832 <vfprintf+0x1e0>
 80a:	b6 01       	movw	r22, r12
 80c:	80 e2       	ldi	r24, 0x20	; 32
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	75 d2       	rcall	.+1258   	; 0xcfc <fputc>
 812:	2a 94       	dec	r2
 814:	f5 cf       	rjmp	.-22     	; 0x800 <vfprintf+0x1ae>
 816:	f5 01       	movw	r30, r10
 818:	37 fc       	sbrc	r3, 7
 81a:	85 91       	lpm	r24, Z+
 81c:	37 fe       	sbrs	r3, 7
 81e:	81 91       	ld	r24, Z+
 820:	5f 01       	movw	r10, r30
 822:	b6 01       	movw	r22, r12
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	6a d2       	rcall	.+1236   	; 0xcfc <fputc>
 828:	21 10       	cpse	r2, r1
 82a:	2a 94       	dec	r2
 82c:	21 e0       	ldi	r18, 0x01	; 1
 82e:	82 1a       	sub	r8, r18
 830:	91 08       	sbc	r9, r1
 832:	81 14       	cp	r8, r1
 834:	91 04       	cpc	r9, r1
 836:	79 f7       	brne	.-34     	; 0x816 <vfprintf+0x1c4>
 838:	e1 c0       	rjmp	.+450    	; 0x9fc <vfprintf+0x3aa>
 83a:	84 36       	cpi	r24, 0x64	; 100
 83c:	11 f0       	breq	.+4      	; 0x842 <vfprintf+0x1f0>
 83e:	89 36       	cpi	r24, 0x69	; 105
 840:	39 f5       	brne	.+78     	; 0x890 <vfprintf+0x23e>
 842:	f8 01       	movw	r30, r16
 844:	37 fe       	sbrs	r3, 7
 846:	07 c0       	rjmp	.+14     	; 0x856 <vfprintf+0x204>
 848:	60 81       	ld	r22, Z
 84a:	71 81       	ldd	r23, Z+1	; 0x01
 84c:	82 81       	ldd	r24, Z+2	; 0x02
 84e:	93 81       	ldd	r25, Z+3	; 0x03
 850:	0c 5f       	subi	r16, 0xFC	; 252
 852:	1f 4f       	sbci	r17, 0xFF	; 255
 854:	08 c0       	rjmp	.+16     	; 0x866 <vfprintf+0x214>
 856:	60 81       	ld	r22, Z
 858:	71 81       	ldd	r23, Z+1	; 0x01
 85a:	07 2e       	mov	r0, r23
 85c:	00 0c       	add	r0, r0
 85e:	88 0b       	sbc	r24, r24
 860:	99 0b       	sbc	r25, r25
 862:	0e 5f       	subi	r16, 0xFE	; 254
 864:	1f 4f       	sbci	r17, 0xFF	; 255
 866:	f3 2d       	mov	r31, r3
 868:	ff 76       	andi	r31, 0x6F	; 111
 86a:	3f 2e       	mov	r3, r31
 86c:	97 ff       	sbrs	r25, 7
 86e:	09 c0       	rjmp	.+18     	; 0x882 <vfprintf+0x230>
 870:	90 95       	com	r25
 872:	80 95       	com	r24
 874:	70 95       	com	r23
 876:	61 95       	neg	r22
 878:	7f 4f       	sbci	r23, 0xFF	; 255
 87a:	8f 4f       	sbci	r24, 0xFF	; 255
 87c:	9f 4f       	sbci	r25, 0xFF	; 255
 87e:	f0 68       	ori	r31, 0x80	; 128
 880:	3f 2e       	mov	r3, r31
 882:	2a e0       	ldi	r18, 0x0A	; 10
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	a3 01       	movw	r20, r6
 888:	75 d2       	rcall	.+1258   	; 0xd74 <__ultoa_invert>
 88a:	88 2e       	mov	r8, r24
 88c:	86 18       	sub	r8, r6
 88e:	44 c0       	rjmp	.+136    	; 0x918 <vfprintf+0x2c6>
 890:	85 37       	cpi	r24, 0x75	; 117
 892:	31 f4       	brne	.+12     	; 0x8a0 <vfprintf+0x24e>
 894:	23 2d       	mov	r18, r3
 896:	2f 7e       	andi	r18, 0xEF	; 239
 898:	b2 2e       	mov	r11, r18
 89a:	2a e0       	ldi	r18, 0x0A	; 10
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	25 c0       	rjmp	.+74     	; 0x8ea <vfprintf+0x298>
 8a0:	93 2d       	mov	r25, r3
 8a2:	99 7f       	andi	r25, 0xF9	; 249
 8a4:	b9 2e       	mov	r11, r25
 8a6:	8f 36       	cpi	r24, 0x6F	; 111
 8a8:	c1 f0       	breq	.+48     	; 0x8da <vfprintf+0x288>
 8aa:	18 f4       	brcc	.+6      	; 0x8b2 <vfprintf+0x260>
 8ac:	88 35       	cpi	r24, 0x58	; 88
 8ae:	79 f0       	breq	.+30     	; 0x8ce <vfprintf+0x27c>
 8b0:	ae c0       	rjmp	.+348    	; 0xa0e <vfprintf+0x3bc>
 8b2:	80 37       	cpi	r24, 0x70	; 112
 8b4:	19 f0       	breq	.+6      	; 0x8bc <vfprintf+0x26a>
 8b6:	88 37       	cpi	r24, 0x78	; 120
 8b8:	21 f0       	breq	.+8      	; 0x8c2 <vfprintf+0x270>
 8ba:	a9 c0       	rjmp	.+338    	; 0xa0e <vfprintf+0x3bc>
 8bc:	e9 2f       	mov	r30, r25
 8be:	e0 61       	ori	r30, 0x10	; 16
 8c0:	be 2e       	mov	r11, r30
 8c2:	b4 fe       	sbrs	r11, 4
 8c4:	0d c0       	rjmp	.+26     	; 0x8e0 <vfprintf+0x28e>
 8c6:	fb 2d       	mov	r31, r11
 8c8:	f4 60       	ori	r31, 0x04	; 4
 8ca:	bf 2e       	mov	r11, r31
 8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <vfprintf+0x28e>
 8ce:	34 fe       	sbrs	r3, 4
 8d0:	0a c0       	rjmp	.+20     	; 0x8e6 <vfprintf+0x294>
 8d2:	29 2f       	mov	r18, r25
 8d4:	26 60       	ori	r18, 0x06	; 6
 8d6:	b2 2e       	mov	r11, r18
 8d8:	06 c0       	rjmp	.+12     	; 0x8e6 <vfprintf+0x294>
 8da:	28 e0       	ldi	r18, 0x08	; 8
 8dc:	30 e0       	ldi	r19, 0x00	; 0
 8de:	05 c0       	rjmp	.+10     	; 0x8ea <vfprintf+0x298>
 8e0:	20 e1       	ldi	r18, 0x10	; 16
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <vfprintf+0x298>
 8e6:	20 e1       	ldi	r18, 0x10	; 16
 8e8:	32 e0       	ldi	r19, 0x02	; 2
 8ea:	f8 01       	movw	r30, r16
 8ec:	b7 fe       	sbrs	r11, 7
 8ee:	07 c0       	rjmp	.+14     	; 0x8fe <vfprintf+0x2ac>
 8f0:	60 81       	ld	r22, Z
 8f2:	71 81       	ldd	r23, Z+1	; 0x01
 8f4:	82 81       	ldd	r24, Z+2	; 0x02
 8f6:	93 81       	ldd	r25, Z+3	; 0x03
 8f8:	0c 5f       	subi	r16, 0xFC	; 252
 8fa:	1f 4f       	sbci	r17, 0xFF	; 255
 8fc:	06 c0       	rjmp	.+12     	; 0x90a <vfprintf+0x2b8>
 8fe:	60 81       	ld	r22, Z
 900:	71 81       	ldd	r23, Z+1	; 0x01
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 5f       	subi	r16, 0xFE	; 254
 908:	1f 4f       	sbci	r17, 0xFF	; 255
 90a:	a3 01       	movw	r20, r6
 90c:	33 d2       	rcall	.+1126   	; 0xd74 <__ultoa_invert>
 90e:	88 2e       	mov	r8, r24
 910:	86 18       	sub	r8, r6
 912:	fb 2d       	mov	r31, r11
 914:	ff 77       	andi	r31, 0x7F	; 127
 916:	3f 2e       	mov	r3, r31
 918:	36 fe       	sbrs	r3, 6
 91a:	0d c0       	rjmp	.+26     	; 0x936 <vfprintf+0x2e4>
 91c:	23 2d       	mov	r18, r3
 91e:	2e 7f       	andi	r18, 0xFE	; 254
 920:	a2 2e       	mov	r10, r18
 922:	89 14       	cp	r8, r9
 924:	58 f4       	brcc	.+22     	; 0x93c <vfprintf+0x2ea>
 926:	34 fe       	sbrs	r3, 4
 928:	0b c0       	rjmp	.+22     	; 0x940 <vfprintf+0x2ee>
 92a:	32 fc       	sbrc	r3, 2
 92c:	09 c0       	rjmp	.+18     	; 0x940 <vfprintf+0x2ee>
 92e:	83 2d       	mov	r24, r3
 930:	8e 7e       	andi	r24, 0xEE	; 238
 932:	a8 2e       	mov	r10, r24
 934:	05 c0       	rjmp	.+10     	; 0x940 <vfprintf+0x2ee>
 936:	b8 2c       	mov	r11, r8
 938:	a3 2c       	mov	r10, r3
 93a:	03 c0       	rjmp	.+6      	; 0x942 <vfprintf+0x2f0>
 93c:	b8 2c       	mov	r11, r8
 93e:	01 c0       	rjmp	.+2      	; 0x942 <vfprintf+0x2f0>
 940:	b9 2c       	mov	r11, r9
 942:	a4 fe       	sbrs	r10, 4
 944:	0f c0       	rjmp	.+30     	; 0x964 <vfprintf+0x312>
 946:	fe 01       	movw	r30, r28
 948:	e8 0d       	add	r30, r8
 94a:	f1 1d       	adc	r31, r1
 94c:	80 81       	ld	r24, Z
 94e:	80 33       	cpi	r24, 0x30	; 48
 950:	21 f4       	brne	.+8      	; 0x95a <vfprintf+0x308>
 952:	9a 2d       	mov	r25, r10
 954:	99 7e       	andi	r25, 0xE9	; 233
 956:	a9 2e       	mov	r10, r25
 958:	09 c0       	rjmp	.+18     	; 0x96c <vfprintf+0x31a>
 95a:	a2 fe       	sbrs	r10, 2
 95c:	06 c0       	rjmp	.+12     	; 0x96a <vfprintf+0x318>
 95e:	b3 94       	inc	r11
 960:	b3 94       	inc	r11
 962:	04 c0       	rjmp	.+8      	; 0x96c <vfprintf+0x31a>
 964:	8a 2d       	mov	r24, r10
 966:	86 78       	andi	r24, 0x86	; 134
 968:	09 f0       	breq	.+2      	; 0x96c <vfprintf+0x31a>
 96a:	b3 94       	inc	r11
 96c:	a3 fc       	sbrc	r10, 3
 96e:	10 c0       	rjmp	.+32     	; 0x990 <vfprintf+0x33e>
 970:	a0 fe       	sbrs	r10, 0
 972:	06 c0       	rjmp	.+12     	; 0x980 <vfprintf+0x32e>
 974:	b2 14       	cp	r11, r2
 976:	80 f4       	brcc	.+32     	; 0x998 <vfprintf+0x346>
 978:	28 0c       	add	r2, r8
 97a:	92 2c       	mov	r9, r2
 97c:	9b 18       	sub	r9, r11
 97e:	0d c0       	rjmp	.+26     	; 0x99a <vfprintf+0x348>
 980:	b2 14       	cp	r11, r2
 982:	58 f4       	brcc	.+22     	; 0x99a <vfprintf+0x348>
 984:	b6 01       	movw	r22, r12
 986:	80 e2       	ldi	r24, 0x20	; 32
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	b8 d1       	rcall	.+880    	; 0xcfc <fputc>
 98c:	b3 94       	inc	r11
 98e:	f8 cf       	rjmp	.-16     	; 0x980 <vfprintf+0x32e>
 990:	b2 14       	cp	r11, r2
 992:	18 f4       	brcc	.+6      	; 0x99a <vfprintf+0x348>
 994:	2b 18       	sub	r2, r11
 996:	02 c0       	rjmp	.+4      	; 0x99c <vfprintf+0x34a>
 998:	98 2c       	mov	r9, r8
 99a:	21 2c       	mov	r2, r1
 99c:	a4 fe       	sbrs	r10, 4
 99e:	0f c0       	rjmp	.+30     	; 0x9be <vfprintf+0x36c>
 9a0:	b6 01       	movw	r22, r12
 9a2:	80 e3       	ldi	r24, 0x30	; 48
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	aa d1       	rcall	.+852    	; 0xcfc <fputc>
 9a8:	a2 fe       	sbrs	r10, 2
 9aa:	16 c0       	rjmp	.+44     	; 0x9d8 <vfprintf+0x386>
 9ac:	a1 fc       	sbrc	r10, 1
 9ae:	03 c0       	rjmp	.+6      	; 0x9b6 <vfprintf+0x364>
 9b0:	88 e7       	ldi	r24, 0x78	; 120
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <vfprintf+0x368>
 9b6:	88 e5       	ldi	r24, 0x58	; 88
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	b6 01       	movw	r22, r12
 9bc:	0c c0       	rjmp	.+24     	; 0x9d6 <vfprintf+0x384>
 9be:	8a 2d       	mov	r24, r10
 9c0:	86 78       	andi	r24, 0x86	; 134
 9c2:	51 f0       	breq	.+20     	; 0x9d8 <vfprintf+0x386>
 9c4:	a1 fe       	sbrs	r10, 1
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <vfprintf+0x37a>
 9c8:	8b e2       	ldi	r24, 0x2B	; 43
 9ca:	01 c0       	rjmp	.+2      	; 0x9ce <vfprintf+0x37c>
 9cc:	80 e2       	ldi	r24, 0x20	; 32
 9ce:	a7 fc       	sbrc	r10, 7
 9d0:	8d e2       	ldi	r24, 0x2D	; 45
 9d2:	b6 01       	movw	r22, r12
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	92 d1       	rcall	.+804    	; 0xcfc <fputc>
 9d8:	89 14       	cp	r8, r9
 9da:	30 f4       	brcc	.+12     	; 0x9e8 <vfprintf+0x396>
 9dc:	b6 01       	movw	r22, r12
 9de:	80 e3       	ldi	r24, 0x30	; 48
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	8c d1       	rcall	.+792    	; 0xcfc <fputc>
 9e4:	9a 94       	dec	r9
 9e6:	f8 cf       	rjmp	.-16     	; 0x9d8 <vfprintf+0x386>
 9e8:	8a 94       	dec	r8
 9ea:	f3 01       	movw	r30, r6
 9ec:	e8 0d       	add	r30, r8
 9ee:	f1 1d       	adc	r31, r1
 9f0:	80 81       	ld	r24, Z
 9f2:	b6 01       	movw	r22, r12
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	82 d1       	rcall	.+772    	; 0xcfc <fputc>
 9f8:	81 10       	cpse	r8, r1
 9fa:	f6 cf       	rjmp	.-20     	; 0x9e8 <vfprintf+0x396>
 9fc:	22 20       	and	r2, r2
 9fe:	09 f4       	brne	.+2      	; 0xa02 <vfprintf+0x3b0>
 a00:	4e ce       	rjmp	.-868    	; 0x69e <vfprintf+0x4c>
 a02:	b6 01       	movw	r22, r12
 a04:	80 e2       	ldi	r24, 0x20	; 32
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	79 d1       	rcall	.+754    	; 0xcfc <fputc>
 a0a:	2a 94       	dec	r2
 a0c:	f7 cf       	rjmp	.-18     	; 0x9fc <vfprintf+0x3aa>
 a0e:	f6 01       	movw	r30, r12
 a10:	86 81       	ldd	r24, Z+6	; 0x06
 a12:	97 81       	ldd	r25, Z+7	; 0x07
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <vfprintf+0x3c8>
 a16:	8f ef       	ldi	r24, 0xFF	; 255
 a18:	9f ef       	ldi	r25, 0xFF	; 255
 a1a:	2b 96       	adiw	r28, 0x0b	; 11
 a1c:	0f b6       	in	r0, 0x3f	; 63
 a1e:	f8 94       	cli
 a20:	de bf       	out	0x3e, r29	; 62
 a22:	0f be       	out	0x3f, r0	; 63
 a24:	cd bf       	out	0x3d, r28	; 61
 a26:	df 91       	pop	r29
 a28:	cf 91       	pop	r28
 a2a:	1f 91       	pop	r17
 a2c:	0f 91       	pop	r16
 a2e:	ff 90       	pop	r15
 a30:	ef 90       	pop	r14
 a32:	df 90       	pop	r13
 a34:	cf 90       	pop	r12
 a36:	bf 90       	pop	r11
 a38:	af 90       	pop	r10
 a3a:	9f 90       	pop	r9
 a3c:	8f 90       	pop	r8
 a3e:	7f 90       	pop	r7
 a40:	6f 90       	pop	r6
 a42:	5f 90       	pop	r5
 a44:	4f 90       	pop	r4
 a46:	3f 90       	pop	r3
 a48:	2f 90       	pop	r2
 a4a:	08 95       	ret

00000a4c <calloc>:
 a4c:	0f 93       	push	r16
 a4e:	1f 93       	push	r17
 a50:	cf 93       	push	r28
 a52:	df 93       	push	r29
 a54:	86 9f       	mul	r24, r22
 a56:	80 01       	movw	r16, r0
 a58:	87 9f       	mul	r24, r23
 a5a:	10 0d       	add	r17, r0
 a5c:	96 9f       	mul	r25, r22
 a5e:	10 0d       	add	r17, r0
 a60:	11 24       	eor	r1, r1
 a62:	c8 01       	movw	r24, r16
 a64:	0d d0       	rcall	.+26     	; 0xa80 <malloc>
 a66:	ec 01       	movw	r28, r24
 a68:	00 97       	sbiw	r24, 0x00	; 0
 a6a:	21 f0       	breq	.+8      	; 0xa74 <calloc+0x28>
 a6c:	a8 01       	movw	r20, r16
 a6e:	60 e0       	ldi	r22, 0x00	; 0
 a70:	70 e0       	ldi	r23, 0x00	; 0
 a72:	32 d1       	rcall	.+612    	; 0xcd8 <memset>
 a74:	ce 01       	movw	r24, r28
 a76:	df 91       	pop	r29
 a78:	cf 91       	pop	r28
 a7a:	1f 91       	pop	r17
 a7c:	0f 91       	pop	r16
 a7e:	08 95       	ret

00000a80 <malloc>:
 a80:	0f 93       	push	r16
 a82:	1f 93       	push	r17
 a84:	cf 93       	push	r28
 a86:	df 93       	push	r29
 a88:	82 30       	cpi	r24, 0x02	; 2
 a8a:	91 05       	cpc	r25, r1
 a8c:	10 f4       	brcc	.+4      	; 0xa92 <malloc+0x12>
 a8e:	82 e0       	ldi	r24, 0x02	; 2
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__flp>
 a96:	f0 91 43 02 	lds	r31, 0x0243	; 0x800243 <__flp+0x1>
 a9a:	20 e0       	ldi	r18, 0x00	; 0
 a9c:	30 e0       	ldi	r19, 0x00	; 0
 a9e:	a0 e0       	ldi	r26, 0x00	; 0
 aa0:	b0 e0       	ldi	r27, 0x00	; 0
 aa2:	30 97       	sbiw	r30, 0x00	; 0
 aa4:	19 f1       	breq	.+70     	; 0xaec <malloc+0x6c>
 aa6:	40 81       	ld	r20, Z
 aa8:	51 81       	ldd	r21, Z+1	; 0x01
 aaa:	02 81       	ldd	r16, Z+2	; 0x02
 aac:	13 81       	ldd	r17, Z+3	; 0x03
 aae:	48 17       	cp	r20, r24
 ab0:	59 07       	cpc	r21, r25
 ab2:	c8 f0       	brcs	.+50     	; 0xae6 <malloc+0x66>
 ab4:	84 17       	cp	r24, r20
 ab6:	95 07       	cpc	r25, r21
 ab8:	69 f4       	brne	.+26     	; 0xad4 <malloc+0x54>
 aba:	10 97       	sbiw	r26, 0x00	; 0
 abc:	31 f0       	breq	.+12     	; 0xaca <malloc+0x4a>
 abe:	12 96       	adiw	r26, 0x02	; 2
 ac0:	0c 93       	st	X, r16
 ac2:	12 97       	sbiw	r26, 0x02	; 2
 ac4:	13 96       	adiw	r26, 0x03	; 3
 ac6:	1c 93       	st	X, r17
 ac8:	27 c0       	rjmp	.+78     	; 0xb18 <malloc+0x98>
 aca:	00 93 42 02 	sts	0x0242, r16	; 0x800242 <__flp>
 ace:	10 93 43 02 	sts	0x0243, r17	; 0x800243 <__flp+0x1>
 ad2:	22 c0       	rjmp	.+68     	; 0xb18 <malloc+0x98>
 ad4:	21 15       	cp	r18, r1
 ad6:	31 05       	cpc	r19, r1
 ad8:	19 f0       	breq	.+6      	; 0xae0 <malloc+0x60>
 ada:	42 17       	cp	r20, r18
 adc:	53 07       	cpc	r21, r19
 ade:	18 f4       	brcc	.+6      	; 0xae6 <malloc+0x66>
 ae0:	9a 01       	movw	r18, r20
 ae2:	bd 01       	movw	r22, r26
 ae4:	ef 01       	movw	r28, r30
 ae6:	df 01       	movw	r26, r30
 ae8:	f8 01       	movw	r30, r16
 aea:	db cf       	rjmp	.-74     	; 0xaa2 <malloc+0x22>
 aec:	21 15       	cp	r18, r1
 aee:	31 05       	cpc	r19, r1
 af0:	f9 f0       	breq	.+62     	; 0xb30 <malloc+0xb0>
 af2:	28 1b       	sub	r18, r24
 af4:	39 0b       	sbc	r19, r25
 af6:	24 30       	cpi	r18, 0x04	; 4
 af8:	31 05       	cpc	r19, r1
 afa:	80 f4       	brcc	.+32     	; 0xb1c <malloc+0x9c>
 afc:	8a 81       	ldd	r24, Y+2	; 0x02
 afe:	9b 81       	ldd	r25, Y+3	; 0x03
 b00:	61 15       	cp	r22, r1
 b02:	71 05       	cpc	r23, r1
 b04:	21 f0       	breq	.+8      	; 0xb0e <malloc+0x8e>
 b06:	fb 01       	movw	r30, r22
 b08:	93 83       	std	Z+3, r25	; 0x03
 b0a:	82 83       	std	Z+2, r24	; 0x02
 b0c:	04 c0       	rjmp	.+8      	; 0xb16 <malloc+0x96>
 b0e:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <__flp+0x1>
 b12:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__flp>
 b16:	fe 01       	movw	r30, r28
 b18:	32 96       	adiw	r30, 0x02	; 2
 b1a:	44 c0       	rjmp	.+136    	; 0xba4 <malloc+0x124>
 b1c:	fe 01       	movw	r30, r28
 b1e:	e2 0f       	add	r30, r18
 b20:	f3 1f       	adc	r31, r19
 b22:	81 93       	st	Z+, r24
 b24:	91 93       	st	Z+, r25
 b26:	22 50       	subi	r18, 0x02	; 2
 b28:	31 09       	sbc	r19, r1
 b2a:	39 83       	std	Y+1, r19	; 0x01
 b2c:	28 83       	st	Y, r18
 b2e:	3a c0       	rjmp	.+116    	; 0xba4 <malloc+0x124>
 b30:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <__brkval>
 b34:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <__brkval+0x1>
 b38:	23 2b       	or	r18, r19
 b3a:	41 f4       	brne	.+16     	; 0xb4c <malloc+0xcc>
 b3c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
 b40:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
 b44:	30 93 41 02 	sts	0x0241, r19	; 0x800241 <__brkval+0x1>
 b48:	20 93 40 02 	sts	0x0240, r18	; 0x800240 <__brkval>
 b4c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 b50:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 b54:	21 15       	cp	r18, r1
 b56:	31 05       	cpc	r19, r1
 b58:	41 f4       	brne	.+16     	; 0xb6a <malloc+0xea>
 b5a:	2d b7       	in	r18, 0x3d	; 61
 b5c:	3e b7       	in	r19, 0x3e	; 62
 b5e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
 b62:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
 b66:	24 1b       	sub	r18, r20
 b68:	35 0b       	sbc	r19, r21
 b6a:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <__brkval>
 b6e:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <__brkval+0x1>
 b72:	e2 17       	cp	r30, r18
 b74:	f3 07       	cpc	r31, r19
 b76:	a0 f4       	brcc	.+40     	; 0xba0 <malloc+0x120>
 b78:	2e 1b       	sub	r18, r30
 b7a:	3f 0b       	sbc	r19, r31
 b7c:	28 17       	cp	r18, r24
 b7e:	39 07       	cpc	r19, r25
 b80:	78 f0       	brcs	.+30     	; 0xba0 <malloc+0x120>
 b82:	ac 01       	movw	r20, r24
 b84:	4e 5f       	subi	r20, 0xFE	; 254
 b86:	5f 4f       	sbci	r21, 0xFF	; 255
 b88:	24 17       	cp	r18, r20
 b8a:	35 07       	cpc	r19, r21
 b8c:	48 f0       	brcs	.+18     	; 0xba0 <malloc+0x120>
 b8e:	4e 0f       	add	r20, r30
 b90:	5f 1f       	adc	r21, r31
 b92:	50 93 41 02 	sts	0x0241, r21	; 0x800241 <__brkval+0x1>
 b96:	40 93 40 02 	sts	0x0240, r20	; 0x800240 <__brkval>
 b9a:	81 93       	st	Z+, r24
 b9c:	91 93       	st	Z+, r25
 b9e:	02 c0       	rjmp	.+4      	; 0xba4 <malloc+0x124>
 ba0:	e0 e0       	ldi	r30, 0x00	; 0
 ba2:	f0 e0       	ldi	r31, 0x00	; 0
 ba4:	cf 01       	movw	r24, r30
 ba6:	df 91       	pop	r29
 ba8:	cf 91       	pop	r28
 baa:	1f 91       	pop	r17
 bac:	0f 91       	pop	r16
 bae:	08 95       	ret

00000bb0 <free>:
 bb0:	cf 93       	push	r28
 bb2:	df 93       	push	r29
 bb4:	00 97       	sbiw	r24, 0x00	; 0
 bb6:	09 f4       	brne	.+2      	; 0xbba <free+0xa>
 bb8:	81 c0       	rjmp	.+258    	; 0xcbc <free+0x10c>
 bba:	fc 01       	movw	r30, r24
 bbc:	32 97       	sbiw	r30, 0x02	; 2
 bbe:	13 82       	std	Z+3, r1	; 0x03
 bc0:	12 82       	std	Z+2, r1	; 0x02
 bc2:	a0 91 42 02 	lds	r26, 0x0242	; 0x800242 <__flp>
 bc6:	b0 91 43 02 	lds	r27, 0x0243	; 0x800243 <__flp+0x1>
 bca:	10 97       	sbiw	r26, 0x00	; 0
 bcc:	81 f4       	brne	.+32     	; 0xbee <free+0x3e>
 bce:	20 81       	ld	r18, Z
 bd0:	31 81       	ldd	r19, Z+1	; 0x01
 bd2:	82 0f       	add	r24, r18
 bd4:	93 1f       	adc	r25, r19
 bd6:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <__brkval>
 bda:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <__brkval+0x1>
 bde:	28 17       	cp	r18, r24
 be0:	39 07       	cpc	r19, r25
 be2:	51 f5       	brne	.+84     	; 0xc38 <free+0x88>
 be4:	f0 93 41 02 	sts	0x0241, r31	; 0x800241 <__brkval+0x1>
 be8:	e0 93 40 02 	sts	0x0240, r30	; 0x800240 <__brkval>
 bec:	67 c0       	rjmp	.+206    	; 0xcbc <free+0x10c>
 bee:	ed 01       	movw	r28, r26
 bf0:	20 e0       	ldi	r18, 0x00	; 0
 bf2:	30 e0       	ldi	r19, 0x00	; 0
 bf4:	ce 17       	cp	r28, r30
 bf6:	df 07       	cpc	r29, r31
 bf8:	40 f4       	brcc	.+16     	; 0xc0a <free+0x5a>
 bfa:	4a 81       	ldd	r20, Y+2	; 0x02
 bfc:	5b 81       	ldd	r21, Y+3	; 0x03
 bfe:	9e 01       	movw	r18, r28
 c00:	41 15       	cp	r20, r1
 c02:	51 05       	cpc	r21, r1
 c04:	f1 f0       	breq	.+60     	; 0xc42 <free+0x92>
 c06:	ea 01       	movw	r28, r20
 c08:	f5 cf       	rjmp	.-22     	; 0xbf4 <free+0x44>
 c0a:	d3 83       	std	Z+3, r29	; 0x03
 c0c:	c2 83       	std	Z+2, r28	; 0x02
 c0e:	40 81       	ld	r20, Z
 c10:	51 81       	ldd	r21, Z+1	; 0x01
 c12:	84 0f       	add	r24, r20
 c14:	95 1f       	adc	r25, r21
 c16:	c8 17       	cp	r28, r24
 c18:	d9 07       	cpc	r29, r25
 c1a:	59 f4       	brne	.+22     	; 0xc32 <free+0x82>
 c1c:	88 81       	ld	r24, Y
 c1e:	99 81       	ldd	r25, Y+1	; 0x01
 c20:	84 0f       	add	r24, r20
 c22:	95 1f       	adc	r25, r21
 c24:	02 96       	adiw	r24, 0x02	; 2
 c26:	91 83       	std	Z+1, r25	; 0x01
 c28:	80 83       	st	Z, r24
 c2a:	8a 81       	ldd	r24, Y+2	; 0x02
 c2c:	9b 81       	ldd	r25, Y+3	; 0x03
 c2e:	93 83       	std	Z+3, r25	; 0x03
 c30:	82 83       	std	Z+2, r24	; 0x02
 c32:	21 15       	cp	r18, r1
 c34:	31 05       	cpc	r19, r1
 c36:	29 f4       	brne	.+10     	; 0xc42 <free+0x92>
 c38:	f0 93 43 02 	sts	0x0243, r31	; 0x800243 <__flp+0x1>
 c3c:	e0 93 42 02 	sts	0x0242, r30	; 0x800242 <__flp>
 c40:	3d c0       	rjmp	.+122    	; 0xcbc <free+0x10c>
 c42:	e9 01       	movw	r28, r18
 c44:	fb 83       	std	Y+3, r31	; 0x03
 c46:	ea 83       	std	Y+2, r30	; 0x02
 c48:	49 91       	ld	r20, Y+
 c4a:	59 91       	ld	r21, Y+
 c4c:	c4 0f       	add	r28, r20
 c4e:	d5 1f       	adc	r29, r21
 c50:	ec 17       	cp	r30, r28
 c52:	fd 07       	cpc	r31, r29
 c54:	61 f4       	brne	.+24     	; 0xc6e <free+0xbe>
 c56:	80 81       	ld	r24, Z
 c58:	91 81       	ldd	r25, Z+1	; 0x01
 c5a:	84 0f       	add	r24, r20
 c5c:	95 1f       	adc	r25, r21
 c5e:	02 96       	adiw	r24, 0x02	; 2
 c60:	e9 01       	movw	r28, r18
 c62:	99 83       	std	Y+1, r25	; 0x01
 c64:	88 83       	st	Y, r24
 c66:	82 81       	ldd	r24, Z+2	; 0x02
 c68:	93 81       	ldd	r25, Z+3	; 0x03
 c6a:	9b 83       	std	Y+3, r25	; 0x03
 c6c:	8a 83       	std	Y+2, r24	; 0x02
 c6e:	e0 e0       	ldi	r30, 0x00	; 0
 c70:	f0 e0       	ldi	r31, 0x00	; 0
 c72:	12 96       	adiw	r26, 0x02	; 2
 c74:	8d 91       	ld	r24, X+
 c76:	9c 91       	ld	r25, X
 c78:	13 97       	sbiw	r26, 0x03	; 3
 c7a:	00 97       	sbiw	r24, 0x00	; 0
 c7c:	19 f0       	breq	.+6      	; 0xc84 <free+0xd4>
 c7e:	fd 01       	movw	r30, r26
 c80:	dc 01       	movw	r26, r24
 c82:	f7 cf       	rjmp	.-18     	; 0xc72 <free+0xc2>
 c84:	8d 91       	ld	r24, X+
 c86:	9c 91       	ld	r25, X
 c88:	11 97       	sbiw	r26, 0x01	; 1
 c8a:	9d 01       	movw	r18, r26
 c8c:	2e 5f       	subi	r18, 0xFE	; 254
 c8e:	3f 4f       	sbci	r19, 0xFF	; 255
 c90:	82 0f       	add	r24, r18
 c92:	93 1f       	adc	r25, r19
 c94:	20 91 40 02 	lds	r18, 0x0240	; 0x800240 <__brkval>
 c98:	30 91 41 02 	lds	r19, 0x0241	; 0x800241 <__brkval+0x1>
 c9c:	28 17       	cp	r18, r24
 c9e:	39 07       	cpc	r19, r25
 ca0:	69 f4       	brne	.+26     	; 0xcbc <free+0x10c>
 ca2:	30 97       	sbiw	r30, 0x00	; 0
 ca4:	29 f4       	brne	.+10     	; 0xcb0 <free+0x100>
 ca6:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <__flp+0x1>
 caa:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <__flp>
 cae:	02 c0       	rjmp	.+4      	; 0xcb4 <free+0x104>
 cb0:	13 82       	std	Z+3, r1	; 0x03
 cb2:	12 82       	std	Z+2, r1	; 0x02
 cb4:	b0 93 41 02 	sts	0x0241, r27	; 0x800241 <__brkval+0x1>
 cb8:	a0 93 40 02 	sts	0x0240, r26	; 0x800240 <__brkval>
 cbc:	df 91       	pop	r29
 cbe:	cf 91       	pop	r28
 cc0:	08 95       	ret

00000cc2 <strnlen_P>:
 cc2:	fc 01       	movw	r30, r24
 cc4:	05 90       	lpm	r0, Z+
 cc6:	61 50       	subi	r22, 0x01	; 1
 cc8:	70 40       	sbci	r23, 0x00	; 0
 cca:	01 10       	cpse	r0, r1
 ccc:	d8 f7       	brcc	.-10     	; 0xcc4 <strnlen_P+0x2>
 cce:	80 95       	com	r24
 cd0:	90 95       	com	r25
 cd2:	8e 0f       	add	r24, r30
 cd4:	9f 1f       	adc	r25, r31
 cd6:	08 95       	ret

00000cd8 <memset>:
 cd8:	dc 01       	movw	r26, r24
 cda:	01 c0       	rjmp	.+2      	; 0xcde <memset+0x6>
 cdc:	6d 93       	st	X+, r22
 cde:	41 50       	subi	r20, 0x01	; 1
 ce0:	50 40       	sbci	r21, 0x00	; 0
 ce2:	e0 f7       	brcc	.-8      	; 0xcdc <memset+0x4>
 ce4:	08 95       	ret

00000ce6 <strnlen>:
 ce6:	fc 01       	movw	r30, r24
 ce8:	61 50       	subi	r22, 0x01	; 1
 cea:	70 40       	sbci	r23, 0x00	; 0
 cec:	01 90       	ld	r0, Z+
 cee:	01 10       	cpse	r0, r1
 cf0:	d8 f7       	brcc	.-10     	; 0xce8 <strnlen+0x2>
 cf2:	80 95       	com	r24
 cf4:	90 95       	com	r25
 cf6:	8e 0f       	add	r24, r30
 cf8:	9f 1f       	adc	r25, r31
 cfa:	08 95       	ret

00000cfc <fputc>:
 cfc:	0f 93       	push	r16
 cfe:	1f 93       	push	r17
 d00:	cf 93       	push	r28
 d02:	df 93       	push	r29
 d04:	fb 01       	movw	r30, r22
 d06:	23 81       	ldd	r18, Z+3	; 0x03
 d08:	21 fd       	sbrc	r18, 1
 d0a:	03 c0       	rjmp	.+6      	; 0xd12 <fputc+0x16>
 d0c:	8f ef       	ldi	r24, 0xFF	; 255
 d0e:	9f ef       	ldi	r25, 0xFF	; 255
 d10:	2c c0       	rjmp	.+88     	; 0xd6a <fputc+0x6e>
 d12:	22 ff       	sbrs	r18, 2
 d14:	16 c0       	rjmp	.+44     	; 0xd42 <fputc+0x46>
 d16:	46 81       	ldd	r20, Z+6	; 0x06
 d18:	57 81       	ldd	r21, Z+7	; 0x07
 d1a:	24 81       	ldd	r18, Z+4	; 0x04
 d1c:	35 81       	ldd	r19, Z+5	; 0x05
 d1e:	42 17       	cp	r20, r18
 d20:	53 07       	cpc	r21, r19
 d22:	44 f4       	brge	.+16     	; 0xd34 <fputc+0x38>
 d24:	a0 81       	ld	r26, Z
 d26:	b1 81       	ldd	r27, Z+1	; 0x01
 d28:	9d 01       	movw	r18, r26
 d2a:	2f 5f       	subi	r18, 0xFF	; 255
 d2c:	3f 4f       	sbci	r19, 0xFF	; 255
 d2e:	31 83       	std	Z+1, r19	; 0x01
 d30:	20 83       	st	Z, r18
 d32:	8c 93       	st	X, r24
 d34:	26 81       	ldd	r18, Z+6	; 0x06
 d36:	37 81       	ldd	r19, Z+7	; 0x07
 d38:	2f 5f       	subi	r18, 0xFF	; 255
 d3a:	3f 4f       	sbci	r19, 0xFF	; 255
 d3c:	37 83       	std	Z+7, r19	; 0x07
 d3e:	26 83       	std	Z+6, r18	; 0x06
 d40:	14 c0       	rjmp	.+40     	; 0xd6a <fputc+0x6e>
 d42:	8b 01       	movw	r16, r22
 d44:	ec 01       	movw	r28, r24
 d46:	fb 01       	movw	r30, r22
 d48:	00 84       	ldd	r0, Z+8	; 0x08
 d4a:	f1 85       	ldd	r31, Z+9	; 0x09
 d4c:	e0 2d       	mov	r30, r0
 d4e:	19 95       	eicall
 d50:	89 2b       	or	r24, r25
 d52:	e1 f6       	brne	.-72     	; 0xd0c <fputc+0x10>
 d54:	d8 01       	movw	r26, r16
 d56:	16 96       	adiw	r26, 0x06	; 6
 d58:	8d 91       	ld	r24, X+
 d5a:	9c 91       	ld	r25, X
 d5c:	17 97       	sbiw	r26, 0x07	; 7
 d5e:	01 96       	adiw	r24, 0x01	; 1
 d60:	17 96       	adiw	r26, 0x07	; 7
 d62:	9c 93       	st	X, r25
 d64:	8e 93       	st	-X, r24
 d66:	16 97       	sbiw	r26, 0x06	; 6
 d68:	ce 01       	movw	r24, r28
 d6a:	df 91       	pop	r29
 d6c:	cf 91       	pop	r28
 d6e:	1f 91       	pop	r17
 d70:	0f 91       	pop	r16
 d72:	08 95       	ret

00000d74 <__ultoa_invert>:
 d74:	fa 01       	movw	r30, r20
 d76:	aa 27       	eor	r26, r26
 d78:	28 30       	cpi	r18, 0x08	; 8
 d7a:	51 f1       	breq	.+84     	; 0xdd0 <__ultoa_invert+0x5c>
 d7c:	20 31       	cpi	r18, 0x10	; 16
 d7e:	81 f1       	breq	.+96     	; 0xde0 <__ultoa_invert+0x6c>
 d80:	e8 94       	clt
 d82:	6f 93       	push	r22
 d84:	6e 7f       	andi	r22, 0xFE	; 254
 d86:	6e 5f       	subi	r22, 0xFE	; 254
 d88:	7f 4f       	sbci	r23, 0xFF	; 255
 d8a:	8f 4f       	sbci	r24, 0xFF	; 255
 d8c:	9f 4f       	sbci	r25, 0xFF	; 255
 d8e:	af 4f       	sbci	r26, 0xFF	; 255
 d90:	b1 e0       	ldi	r27, 0x01	; 1
 d92:	3e d0       	rcall	.+124    	; 0xe10 <__ultoa_invert+0x9c>
 d94:	b4 e0       	ldi	r27, 0x04	; 4
 d96:	3c d0       	rcall	.+120    	; 0xe10 <__ultoa_invert+0x9c>
 d98:	67 0f       	add	r22, r23
 d9a:	78 1f       	adc	r23, r24
 d9c:	89 1f       	adc	r24, r25
 d9e:	9a 1f       	adc	r25, r26
 da0:	a1 1d       	adc	r26, r1
 da2:	68 0f       	add	r22, r24
 da4:	79 1f       	adc	r23, r25
 da6:	8a 1f       	adc	r24, r26
 da8:	91 1d       	adc	r25, r1
 daa:	a1 1d       	adc	r26, r1
 dac:	6a 0f       	add	r22, r26
 dae:	71 1d       	adc	r23, r1
 db0:	81 1d       	adc	r24, r1
 db2:	91 1d       	adc	r25, r1
 db4:	a1 1d       	adc	r26, r1
 db6:	20 d0       	rcall	.+64     	; 0xdf8 <__ultoa_invert+0x84>
 db8:	09 f4       	brne	.+2      	; 0xdbc <__ultoa_invert+0x48>
 dba:	68 94       	set
 dbc:	3f 91       	pop	r19
 dbe:	2a e0       	ldi	r18, 0x0A	; 10
 dc0:	26 9f       	mul	r18, r22
 dc2:	11 24       	eor	r1, r1
 dc4:	30 19       	sub	r19, r0
 dc6:	30 5d       	subi	r19, 0xD0	; 208
 dc8:	31 93       	st	Z+, r19
 dca:	de f6       	brtc	.-74     	; 0xd82 <__ultoa_invert+0xe>
 dcc:	cf 01       	movw	r24, r30
 dce:	08 95       	ret
 dd0:	46 2f       	mov	r20, r22
 dd2:	47 70       	andi	r20, 0x07	; 7
 dd4:	40 5d       	subi	r20, 0xD0	; 208
 dd6:	41 93       	st	Z+, r20
 dd8:	b3 e0       	ldi	r27, 0x03	; 3
 dda:	0f d0       	rcall	.+30     	; 0xdfa <__ultoa_invert+0x86>
 ddc:	c9 f7       	brne	.-14     	; 0xdd0 <__ultoa_invert+0x5c>
 dde:	f6 cf       	rjmp	.-20     	; 0xdcc <__ultoa_invert+0x58>
 de0:	46 2f       	mov	r20, r22
 de2:	4f 70       	andi	r20, 0x0F	; 15
 de4:	40 5d       	subi	r20, 0xD0	; 208
 de6:	4a 33       	cpi	r20, 0x3A	; 58
 de8:	18 f0       	brcs	.+6      	; 0xdf0 <__ultoa_invert+0x7c>
 dea:	49 5d       	subi	r20, 0xD9	; 217
 dec:	31 fd       	sbrc	r19, 1
 dee:	40 52       	subi	r20, 0x20	; 32
 df0:	41 93       	st	Z+, r20
 df2:	02 d0       	rcall	.+4      	; 0xdf8 <__ultoa_invert+0x84>
 df4:	a9 f7       	brne	.-22     	; 0xde0 <__ultoa_invert+0x6c>
 df6:	ea cf       	rjmp	.-44     	; 0xdcc <__ultoa_invert+0x58>
 df8:	b4 e0       	ldi	r27, 0x04	; 4
 dfa:	a6 95       	lsr	r26
 dfc:	97 95       	ror	r25
 dfe:	87 95       	ror	r24
 e00:	77 95       	ror	r23
 e02:	67 95       	ror	r22
 e04:	ba 95       	dec	r27
 e06:	c9 f7       	brne	.-14     	; 0xdfa <__ultoa_invert+0x86>
 e08:	00 97       	sbiw	r24, 0x00	; 0
 e0a:	61 05       	cpc	r22, r1
 e0c:	71 05       	cpc	r23, r1
 e0e:	08 95       	ret
 e10:	9b 01       	movw	r18, r22
 e12:	ac 01       	movw	r20, r24
 e14:	0a 2e       	mov	r0, r26
 e16:	06 94       	lsr	r0
 e18:	57 95       	ror	r21
 e1a:	47 95       	ror	r20
 e1c:	37 95       	ror	r19
 e1e:	27 95       	ror	r18
 e20:	ba 95       	dec	r27
 e22:	c9 f7       	brne	.-14     	; 0xe16 <__ultoa_invert+0xa2>
 e24:	62 0f       	add	r22, r18
 e26:	73 1f       	adc	r23, r19
 e28:	84 1f       	adc	r24, r20
 e2a:	95 1f       	adc	r25, r21
 e2c:	a0 1d       	adc	r26, r0
 e2e:	08 95       	ret

00000e30 <_exit>:
 e30:	f8 94       	cli

00000e32 <__stop_program>:
 e32:	ff cf       	rjmp	.-2      	; 0xe32 <__stop_program>
